---
layout: post
title:  "Rails 5 API"
date:   2017-02-04 01:46:30 -0300
categories: rails development tutorial api rails-5
---

This guide will let you with a running API using Rails 5 with Rails API-only project with authentication, serializers, CORS, versioned API, Rate Limiting and Throttling. All of it running on Heroku.


# Installing Rails 5

First, if you don't have anything installed, follow [this guide to have Rails 5 installed](https://gorails.com/setup){:target="_blank"}.

If you have some ruby or rails, make sure you are running Ruby 2.2.2 or newer as it’s required by Rails 5, then go ahead an install the Rails gem:
{% highlight shell %}
gem install rails
{% endhighlight %}

Then, let's check if we have Rails 5 installed:
{% highlight shell %}
# version should be >= Rails 5.0.0
rails --version
{% endhighlight %}

According to the official Rails guide all we have to do for an API-only Rails app is to pass the --api option when creating a new app:

{% highlight shell %}
rails new api_name --api
{% endhighlight %}

Next, let's run bundle and rake (in our app directory) to install the gems and setup our database:

{% highlight shell %}
cd api_name
bundle
rake db:setup
{% endhighlight %}
> <sub>You might get some ::Fixnum or ::Bignum warnings, you can ignore them for now.</sub>

And that's all! We have a new API-only Rails app. Great! 

# Adding RSpec for testing

We'll be using RSpec because of the built-in RSpec generators, which allows us to auto generate default model and controller specs when using scaffold generators. So, to use RSpec, let's add the rspec-rails gem to our Gemfile in :development and :test group. I had byebug by default, so the group should loook like this:

{% highlight ruby linenos %}
group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platform: :mri

  # Use RSpec for specs
  gem 'rspec-rails', '>= 3.5.0'

  # Use Factory Girl for generating random test data
  gem 'factory_girl_rails'
end
{% endhighlight %}
Update your bundle:
{% highlight shell %}
bundle
{% endhighlight %}
Run the RSpec installer:
{% highlight shell %}
rails g rspec:install  
{% endhighlight %}
This should create the spec folder and add a couple of helpers:
{% highlight shell %}
      create  .rspec
      create  spec
      create  spec/spec_helper.rb
      create  spec/rails_helper.rb
{% endhighlight %}
Now, you can remove the test directory in Rails, because we won’t be using unit tests, but specifications instead.

{% highlight shell %}
rm -r test
{% endhighlight %}

At this point we have a clean app, you might want to start using GIT to version your app, you can follow [this Github guide if you want](https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/){:target="_blank"}.


# Building our API

Lets start with our API controllers.

When an app is created using --api flag the scaffold generators adapt to generate your API resources as normal, without using any special arguments.
{% highlight shell %}
rails g scaffold user name email
{% endhighlight %}
This will generate:
{% highlight shell %}
      invoke  active_record
      create    db/migrate/20170128235600_create_users.rb
      create    app/models/user.rb
      invoke    rspec
      create      spec/models/user_spec.rb
      invoke      factory_girl
      create        spec/factories/users.rb
      invoke  resource_route
       route    resources :users
      invoke  scaffold_controller
      create    app/controllers/users_controller.rb
      invoke    rspec
      create      spec/controllers/users_controller_spec.rb
      create      spec/routing/users_routing_spec.rb
      invoke      rspec
      create        spec/requests/users_spec.rb
{% endhighlight %}
As you can see, there's no views. This is because we used the --api flag. Also you should delete the migration because next step we are not going to need it (change the timestamp):

{% highlight shell %}
rm db/migrate/20170128235600_create_users.rb
{% endhighlight %}

Now create as many resources as you like.

# Using Token Authentication

Securiy first. We'll be using token-based authentication for our API. I like the [devise_token_auth gem](https://github.com/lynndylanhurley/devise_token_auth){:target="_blank"} because is built for easy usage with AngularJS, React and others. We'll allow email registration.

We are making an REST API, and it should be stateless, meaning it should not have any knowledge of cookies or sessions.

We are going to use a very safe an practical technique. API's usually use HTTP token based authentication, which is added on the request header:
{% highlight shell %}
access-token "WCZZYjnOQFUYfJIN2ShH1iD24UHo58A6TI"
{% endhighlight %}

But what happens if the user has sign in on two different devices? That's why we'll send also a client token:

{% highlight shell %}
access-token "WCZZYjnOQFUYfJIN2ShH1iD24UHo58A6TI"
client "QI58RKXNC9Q63M7B"
{% endhighlight %}

Finally for performance reason, we'll algo use and uid parameter to ease the search of the token:

{% highlight shell %}
access-token "WCZZYjnOQFUYfJIN2ShH1iD24UHo58A6TI"
client "QI58RKXNC9Q63M7B"
uid "user_email@example.com"
{% endhighlight %}

So, let's add the gem to our Gemfile:
{% highlight ruby linenos %}
# Token Authentication with Devise
gem 'devise_token_auth'
{% endhighlight %}
Update your bundle:
{% highlight shell %}
bundle
{% endhighlight %}

Initial setup, by default we'll use the User model and mount the authentication routes in /auth path:
{% highlight shell %}
rails g devise_token_auth:install User
{% endhighlight %}
This will generate:
{% highlight shell %}
      create  config/initializers/devise_token_auth.rb
      create  db/migrate/20170129000224_devise_token_auth_create_users.rb
      insert  app/models/user.rb
      insert  app/controllers/application_controller.rb
        gsub  config/routes.rb
{% endhighlight %}

We shall include the Rails concern called DeviseTokenAuth::Concerns::SetUserByToken. This concern will provide access to controller methods such as authenticate_user!, user_signed_in?, etc.
{% highlight ruby linenos %}
class ApplicationController < ActionController::API
  include DeviseTokenAuth::Concerns::SetUserByToken

  # ...
end
{% endhighlight %}

This way, we can now restrict controller actions to authenticated users only:

{% highlight ruby linenos %}
class UsersController < ApplicationController
    before_action :authenticate_user!, only: [:index]

    # GET /users
    def index
      @users = User.all

      render json: @users
    end

    # ...
end
{% endhighlight %}

I recommend to disable change_headers_on_each_request, at least for simplicity of this tutorial. Also, will make a default confirm_url when users activate their accounts. Change it in the devise_token_auth initializer:
{% highlight ruby linenos %}
# config/initializers/devise_token_auth.rb
DeviseTokenAuth.setup do |config|
  # ...
  config.change_headers_on_each_request = false

  config.default_confirm_success_url = 'http://localhost:3000'
  # ...
end
{% endhighlight %}
You can now check the created migration, as you can see creates the "users" table and adds a lot of fields, including name and email. Now let's apply this migration:
{% highlight shell %}
rake db:migrate
{% endhighlight %}

Also remove the :omniauthable module from Devise at the User model, as we are not going to use it. So the User model looks like this:
{% highlight ruby linenos %}
class User < ApplicationRecord
  # Include default devise modules.
  devise :database_authenticatable, :registerable,
          :recoverable, :rememberable, :trackable, :validatable,
          :confirmable
  include DeviseTokenAuth::Concerns::User
end
{% endhighlight %}
We should also create the devise initializer so we use correctly our flash messages in the API and also the sender of our e-mails:
{% highlight ruby linenos %}
# config/initializers/devise.rb
Devise.setup do |config|
  # The e-mail address that mail will appear to be sent from
  # If absent, mail is sent from "please-change-me-at-config-initializers-devise@example.com"
  config.mailer_sender = "support@api_name.com"

  # If using rails-api, you may want to tell devise to not use ActionDispatch::Flash
  # middleware b/c rails-api does not include it.
  # See: http://stackoverflow.com/q/19600905/806956
  config.navigational_formats = [:json]
end
{% endhighlight %}

If you also want to send emails in development, I suggest using [MailCatcher](https://mailcatcher.me/){:target="_blank"}. Add the following:
{% highlight ruby linenos %}
# config/environments/development.rb
Rails.application.configure do
  # ...

  # MailCatcher configuration
  config.action_mailer.default_url_options = { :host => 'localhost:3000' }
  config.action_mailer.delivery_method = :smtp
  config.action_mailer.smtp_settings = { :address => 'localhost', :port => 1025 }
end
{% endhighlight %}

Now you can run:
{% highlight shell%}
rails s
{% endhighlight %}

Our new API is now running on http://localhost:3000. Awesome!

# Serializing the API

Right now, our API is sending out everything from our Users table, so we need a way to control what data we are sending through our API.

We're going to use [AMS (Active Model Serializers)](https://github.com/rails-api/active_model_serializers){:target="_blank"}. AMS is super simple because uses Rails philosophy of convention over configuration to the JSON generation.

Let's add the active_model_serializers gem to our Gemfile:
{% highlight shell %}
gem 'active_model_serializers'
{% endhighlight %}
Update your bundle:
{% highlight shell %}
bundle
{% endhighlight %}

Now let's create a default serializer for our User:
{% highlight shell %}
rails g serializer user
{% endhighlight %}
In app/serializers/user_serializer.rb, we'll find this code:
{% highlight ruby linenos %}
class UserSerializer < ActiveModel::Serializer
  attributes :id
end
{% endhighlight %}
The :id attribute is added by default. Let's add :first_name, :last_name and :email attributes to the serializer:
{% highlight ruby linenos %}
class UserSerializer < ActiveModel::Serializer
  attributes :id, :first_name, :last_name, :email
end
{% endhighlight %}
If you added any relationship to your model, just declare them on the serializer as you would with any attribute.

Also include the ActionController::Serialization dependency in your controller like so:
{% highlight ruby linenos %}
class ApplicationController < ActionController::API
  include DeviseTokenAuth::Concerns::SetUserByToken
  include ActionController::Serialization

  # ...
end
{% endhighlight %}

And we are ready!


# Enabling CORS

As our API will be public, we should enable Cross-Origin Resource Sharing (CORS)  to make cross-origin AJAX requests possible.

There's a gem for this called rack-cors. Let's add it to our Gemfile:
{% highlight shell %}
gem 'rack-cors'
{% endhighlight %}
Update your bundle:
{% highlight shell %}
bundle
{% endhighlight %}

And put the following code in application.rb. For more info about this (recommended) [visit the Rack CORS gem in Github](https://github.com/cyu/rack-cors){:target="_blank"}.
{% highlight ruby linenos %}
# config/application.rb
module ApiApp
  class Application < Rails::Application
    # ...
    config.middleware.use Rack::Cors do
      allow do
        origins '*'
        resource '*',
          :headers => :any,
          :expose  => ['access-token', 'expiry', 'token-type', 'uid', 'client'],
          :methods => [:get, :post, :options, :delete, :put]
      end
    end
  end
end
{% endhighlight %}

Beware that this is really **dangerous**, because we are allowing cross domain requests from **any** domain. The expose parameters are required by the [devise_token_auth gem](https://github.com/lynndylanhurley/devise_token_auth#cors){:target="_blank"}.

# Versioning Your API

Before making public our API, you should consider versioning it. If someone is using your API and you make brekaing changes, anyone using it might lose access to it. So to avoid this kind of problems, when making breaking changes we should just increase the API version, for example, from v1 to v2. Keep v1 active for backwards compatibility.

To use versioning with the URL format:
{% highlight shell %}
GET http://www.bestapiever.com/api/v1/users/
{% endhighlight %}

We shall use a directory structure like this defining all the v1 controllers within the Api::V1 namespace:
{% highlight shell %}
app/controllers/
.
|-- api
|   `-- v1
|       |-- api_controller.rb
|       `-- users_controller.rb
|-- application_controller.rb
{% endhighlight %}
Let's start with the **new** ApiController:
{% highlight ruby linenos %}
# app/controllers/api/v1/api_controller.rb

module Api::V1
  class ApiController < ApplicationController
    # Generic API stuff here
  end
end
{% endhighlight %}
Now we should move our Users controller, add the module and change the ApplicationController with the new API-specific ApiController:
{% highlight ruby linenos %}
# app/controllers/api/v1/users_controller.rb

module Api::V1
  class UsersController < ApiController

    # ...

  end
end
{% endhighlight %}
Finally we have to update our routes:
{% highlight ruby linenos %}
# config/routes.rb
namespace :api do
  namespace :v1 do
    resources :users
  end
end
{% endhighlight %}

Now your API routes are looking so professional! :)


# Rate Limiting and Throttling

To protect our API from DDoS, brute force attacks, hammering, etc, in Rails we use a Rake middleware called Rack::Attack, which is [a gem called rack-attack](https://github.com/kickstarter/rack-attack){:target="_blank"} and it allows us to:

**whitelist**: Process normally if certain conditions are true

**blacklist**: Send a denied message for certain requests

**throttle**: Check if the user is within their allowed usage

**track**: Track this request to be able to log certain information about the requests


Let's add the gem to our Gemfile:
{% highlight ruby linenos %}
# Blocking & throttling abusive requests
gem 'rack-attack'
{% endhighlight %}
Update your bundle:
{% highlight shell %}
bundle
{% endhighlight %}

Include in our application.rb file the use of this middleware:
{% highlight ruby linenos %}
module ApiName
  class Application < Rails::Application

    # ...

    config.middleware.use Rack::Attack

  end
end
{% endhighlight %}

Add a rack-attack.rb file to config/initializers/ to configure your Rack::Attack rules. Add basic rules to your initializer, i got this ones from [the same rack-attack wiki](https://github.com/kickstarter/rack-attack/wiki/Example-Configuration){:target="_blank"}:
{% highlight ruby linenos %}
class Rack::Attack

  ### Configure Cache ###

  # If you don't want to use Rails.cache (Rack::Attack's default), then
  # configure it here.
  #
  # Note: The store is only used for throttling (not blacklisting and
  # whitelisting). It must implement .increment and .write like
  # ActiveSupport::Cache::Store

  # Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new 

  ### Throttle Spammy Clients ###

  # If any single client IP is making tons of requests, then they're
  # probably malicious or a poorly-configured scraper. Either way, they
  # don't deserve to hog all of the app server's CPU. Cut them off!
  #
  # Note: If you're serving assets through rack, those requests may be
  # counted by rack-attack and this throttle may be activated too
  # quickly. If so, enable the condition to exclude them from tracking.

  # Throttle all requests by IP (60rpm)
  #
  # Key: "rack::attack:#{Time.now.to_i/:period}:req/ip:#{req.ip}"
  throttle('req/ip', :limit => 300, :period => 5.minutes) do |req|
    req.ip # unless req.path.start_with?('/assets')
  end

  ### Prevent Brute-Force Login Attacks ###

  # The most common brute-force login attack is a brute-force password
  # attack where an attacker simply tries a large number of emails and
  # passwords to see if any credentials match.
  #
  # Another common method of attack is to use a swarm of computers with
  # different IPs to try brute-forcing a password for a specific account.

  # Throttle POST requests to /login by IP address
  #
  # Key: "rack::attack:#{Time.now.to_i/:period}:logins/ip:#{req.ip}"
  throttle('logins/ip', :limit => 5, :period => 20.seconds) do |req|
    if req.path == '/login' && req.post?
      req.ip
    end
  end

  # Throttle POST requests to /login by email param
  #
  # Key: "rack::attack:#{Time.now.to_i/:period}:logins/email:#{req.email}"
  #
  # Note: This creates a problem where a malicious user could intentionally
  # throttle logins for another user and force their login requests to be
  # denied, but that's not very common and shouldn't happen to you. (Knock
  # on wood!)
  throttle("logins/email", :limit => 5, :period => 20.seconds) do |req|
    if req.path == '/login' && req.post?
      # return the email if present, nil otherwise
      req.params['email'].presence
    end
  end

  ### Custom Throttle Response ###

  # By default, Rack::Attack returns an HTTP 429 for throttled responses,
  # which is just fine.
  #
  # If you want to return 503 so that the attacker might be fooled into
  # believing that they've successfully broken your app (or you just want to
  # customize the response), then uncomment these lines.
  # self.throttled_response = lambda do |env|
  #  [ 503,  # status
  #    {},   # headers
  #    ['']] # body
  # end
end
{% endhighlight %}

This won't stop sophisticated hackers, but at least you can sleep more soundly tonight!

# Testing what we got

First we should sign_up a new user:
{% highlight shell %}
curl -v -F email=first_user@ever.com -F password=12345678  https://parkandgoapi.herokuapp.com/
{% endhighlight %}

We now should confirm our user's account, if you had mailcatcher running then just check it out. Otherwise you can lookup in the server's log for the confirmation URL. My log looks like this:

{% highlight shell %}
Devise::Mailer#confirmation_instructions: processed outbound mail in 311.6ms
Sent mail to first_user@ever.com (94.1ms)
Date: Fri, 03 Feb 2017 15:54:08 -0300
From: support@myapp.com
Reply-To: support@myapp.com
To: first_user@ever.com
Message-ID: <5894d1d041894_1647c3fe7f5acb1d4283c6@Walters-MacBook-Pro.local.mail>
Subject: Confirmation instructions
Mime-Version: 1.0
Content-Type: text/html;
 charset=UTF-8
Content-Transfer-Encoding: 7bit
client-config: default
redirect-url: http://localhost:3000

<p>Welcome first_user@ever.com!</p>

<p>You can confirm your account email through the link below: </p>

<p><a href="http://localhost:3000/auth/confirmation?config=default&confirmation_token=sis73_YEQZy33iAde9Ed&redirect_url=http%3A%2F%2Flocalhost%3A3000">Confirm my account</a></p>
{% endhighlight %}

So now I just open this link in the browser and it'll redirect me to localhost:
{% highlight shell %}
http://localhost:3000/auth/confirmation?config=default&confirmation_token=sis73_YEQZy33iAde9Ed&redirect_url=http%3A%2F%2Flocalhost%3A3000

#redirects successfully to
http://localhost:3000/?account_confirmation_success=true&client_id=xic4zENwmKOp06N6DKdHGA&config=default&expiry=1487358249&token=KFNqXstwdBfOUAFM-ZwNbA&uid=first_user%40ever.com
{% endhighlight %}

so we can now we grab the client_id, uid and token, so we can now request the /users:

{% highlight shell %}
curl -X GET -H "Content-Type: application/json" -H "uid: first_user@ever.com" -H "Client: xic4zENwmKOp06N6DKdHGA" -H "token-type: Bearer" -H "access-token: KFNqXstwdBfOUAFM-ZwNbA" -H "Authorization: Basic Og==" -H "Cache-Control: no-cache" http://localhost:3000/api/v1/users/

#Response, list of users
[{"id":1,"first_name":null,"last_name":null,"email":"first_user@ever.com"}]
{% endhighlight %}

If you try the same with any token you should get:

{% highlight shell %}
curl -X GET -H "Content-Type: application/json" -H "uid: first_user@ever.com" -H "Client: Nananananan" -H "token-type: Bearer" -H "access-token: BATMAAAAN" -H "Authorization: Basic Og==" -H "Cache-Control: no-cache" http://localhost:3000/api/v1/users/

#Response
{"errors":["Authorized users only."]}
{% endhighlight %}

Tada! Next step: the cloud!

# Heroku

Everything working perfect in local, now we should take this one step further and deploy it to Heroku. First, basics.

Adds pg gem to production environment and move sqlite3 to development and test:
{% highlight ruby linenos %}
group :production do
  # use postgres
  gem 'pg'
end

group :development, :test do
  # Use sqlite3 as the database for Active Record
  gem 'sqlite3'
end
{% endhighlight %}

Then update your bundle:
{% highlight shell %}
bundle
{% endhighlight %}

Also add the ruby version you are using, I'm using 2.4.0, so:
{% highlight ruby linenos %}
ruby "2.4.0"
{% endhighlight %}

Now we have the code, we must add GIT (assuming you are in the root directory of your project):
{% highlight shell %}
git init
git add .
git commit -m "Initial commit"
{% endhighlight %}

Now let's add a Heroku app:
{% highlight shell %}
heroku create

#Creating app... done, ⬢ heroku-random-app-name
#https://heroku-random-app-name.herokuapp.com/ | https://git.heroku.com/heroku-random-app-name.git
{% endhighlight %}

And push our code to the cloud!
{% highlight shell %}
git push heroku master
{% endhighlight %}

Great! Don't forget migrate our DB:
{% highlight shell %}
heroku run rake db:migrate
{% endhighlight %}

Finally you should activate email usage, I recommend using Sendgrid. Add it to the Gemfile, inside production group:

{% highlight ruby linenos %}
group :production do
  # ...
  # Emails
  gem 'sendgrid-ruby'
end
{% endhighlight %}

Then update your bundle:
{% highlight shell %}
bundle
{% endhighlight %}

Also you should add the addon in Heroku and set the API Key. [You can follow the official docs](https://devcenter.heroku.com/articles/sendgrid){:target="_blank"} 



Finally, we can make our curl and test our brand-new API.

# Conclusion

Now you got the basics of your API, now you can safely start your adventure using the Rails way.

Please any feedback will be pretty much appreciated.

Enjoy the journey!